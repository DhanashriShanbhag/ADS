#include <iostream>
using namespace std;
#include<stdio.h>
#include<string.h>
#include<conio.h>
#include<stdlib.h>
#define MAX 4
#define MIN 2
typedef char Type[10];
typedef struct Btree
{
Type key;
}BT;
typedef struct treenode
{
int count;
BT entry[MAX+1];
treenode *branch[MAX+1];
}node;
class B
{
node *root;
public:
int LT(char *,char *);
int EQ(char *,char *);
node *Search(Type target,node *root,int *targetpos);
int SearchNode(Type target,node *current,int *pos);
node *Insert(BT New,node *root);
int MoveDown(BT New,node *current,BT *med,node **medright);
void InsertIn(BT med,node *medright,node *current,int pos);
void Split(BT med,node *medright,node *current,int pos,BT *newmedian,node
**newright);
void Delete(Type target,node **root);
void Del_node(Type target,node *current);
void Remove(node *current,int pos);
void Successor(node *current,int pos);
void Adjust(node *current,int pos);
void MoveRight(node *current,int pos);
void MoveLeft(node *current,int pos);
void Combine(node *current,int pos);
void InOrder(node *root);
};
int B::LT(char *a,char *b)
{
if((strcmp(a,b))<(0))
return 1;
else
return 0;
}
int B::EQ(char *a,char *b)
{
if((strcmp(a,b))==(0))
return 1;
else
return 0;
}
node* B::Search(Type target,node *root,int *targetpos)
{
if(root==NULL)
return NULL;
else if(SearchNode(target,root,targetpos))
return root;
else
return Search(target,root->branch[*targetpos],targetpos);
}
int B::SearchNode(Type target,node *current,int *pos)
{
if(LT(target,current->entry[1].key))
{
*pos=0;
return 0;
}
else
{
for(*pos=current->count;
LT(target,current->entry[*pos].key) && *pos>1;(*pos)--);
return EQ(target,current->entry[*pos].key);
}
}
node *B::Insert(BT newentry,node *root)
{
BT medentry;
node *medright;
node *New;
if(MoveDown(newentry,root, &medentry, &medright))
{
New=new node;
New->count=1;
New->entry[1]=medentry;
New->branch[0]=root;
New->branch[1]=medright;
return New;
}
return root;
}
int B::MoveDown(BT New,node *current,BT *med,node **medright)
{
int pos;
if(current==NULL)
{
*med=New;
*medright=NULL;
return 1;
}
else
{
if(SearchNode(New.key,current,&pos))
cout<<"Duplicate key\n";
if(MoveDown(New,current->branch[pos],med,medright))
if(current->count<MAX)
{
InsertIn(*med,*medright,current,pos);
return 0;
}
else
{
Split(*med,*medright,current,pos,med,medright);
return 1;
}
return 0;
}
}
void B::InsertIn(BT med,node *medright,node *current,int pos)
{
int i;
for(i=current->count;i>pos;i--)
{
current->entry[i+1]=current->entry[i];
current->branch[i+1]=current->branch[i];
}
current->entry[pos+1]=med;
current->branch[pos+1]=medright;
current->count++;
}
void B::Split(BT med,node *medright,node *current,int pos,BT *newmedian,node
**newright)
{
int i;
int median;
if(pos<=MIN)
median=MIN;
else
median=MIN+1;
*newright=new node;
for(i=median+1;i<=MAX;i++)
{
(*newright)->entry[i-median]=current->entry[i];
(*newright)->branch[i-median]=current->branch[i];
}
(*newright)->count=MAX-median;
current->count=median;
if(pos<=MIN)
InsertIn(med,medright,current,pos);
else
InsertIn(med,medright,*newright,pos-median);
*newmedian=current->entry[current->count];
(*newright)->branch[0]=current->branch[current->count];
current->count--;
}
void B::Delete(Type target,node **root)
{
node *prev;
Del_node(target,*root);
if((*root)->count==0)
{
prev=*root;
*root=(*root)->branch[0];
free(prev);
}
}
void B::Del_node(Type target,node *current)
{
int pos;
if(!current)
{
cout<<"Item not in the Btree\n";
return;
}
else
{
if(SearchNode(target,current,&pos))
if(current->branch[pos-1])
{
Successor(current,pos);
Del_node(current->entry[pos].key,current->branch[pos]);
}
else
Remove(current,pos);
else
    Del_node(target,current->branch[pos]);
if(current->branch[pos])
if(current->branch[pos]->count<MIN)
Adjust(current,pos);
}
}
void B::Remove(node *current,int pos)
{
int i;
for(i=pos+1;i<=current->count;i++)
{
current->entry[i-1]=current->entry[i];
current->branch[i-1]=current->branch[i];
}
current->count--;
}
void B::Successor(node *current,int pos)
{
node *leaf;
for(leaf=current->branch[pos];leaf->branch[0];
leaf=leaf->branch[0]);
current->entry[pos]=leaf->entry[1];
}
void B::Adjust(node *current,int pos)
{
if(pos==0)
if(current->branch[1]->count > MIN)
MoveLeft(current,1);
else
Combine(current,1);
else if(pos==current->count)
if(current->branch[pos-1]->count > MIN)
MoveRight(current,pos);
else
Combine(current,pos);
else if(current->branch[pos-1]->count > MIN)
MoveRight(current,pos);
else if(current->branch[pos+1]->count > MIN)
MoveLeft(current,pos+1);
else
Combine(current,pos);
}
void B::MoveRight(node *current,int pos)
{
int i;
node *t;
t=current->branch[pos];
for(i=t->count;i>0;i--)
{
t->entry[i+1]=t->entry[i];
t->branch[i+1]=t->branch[i];
}
t->branch[1]=t->branch[0];
t->count++;
t->entry[1]=current->entry[pos];
t=current->branch[pos-1];
current->entry[pos]=t->entry[t->count];
current->branch[pos]->branch[0]=t->branch[t->count];
t->count--;
}
void B::MoveLeft(node *current,int pos)
{
int c;
node *t;
t=current->branch[pos-1];
t->count++;
t->entry[t->count]=current->entry[pos];
t->branch[t->count]=current->branch[pos]->branch[0];
t=current->branch[pos];
current->entry[pos]=t->entry[1];
t->branch[0]=t->branch[1];
t->count--;
for(c=1;c<=t->count;c++)
t->entry[c]=t->entry[c+1];
t->branch[c]=t->branch[c+1];
}
void B::Combine(node *current,int pos)
{
int c;
node *right;
node *left;
right=current->branch[pos];
left=current->branch[pos-1];
left->count++;
left->entry[left->count]=current->entry[pos];
left->branch[left->count]=right->branch[0];
for(c=1;c<=right->count;c++)
{
left->count++;
left->entry[left->count]=right->entry[c];
left->branch[left->count]=right->branch[c];
}
for(c=pos;c<current->count;c++)
{
current->entry[c]=current->entry[c+1];
current->branch[c]=current->branch[c+1];
}
current->count--;
free(right);
}
void B::InOrder(node *root)
{
int pos;
if(root)
{
InOrder(root->branch[0]);
for(pos=1;pos<=root->count;pos++)
{
cout<<" "<<root->entry[pos].key;
InOrder(root->branch[pos]);
}
}
}
int main()
{
int choice,targetpos;
Type inKey;
BT New;
B obj;
node *root,*target;
root=NULL;
while(1)
{
cout<<"\n IMPLEMENTATION OF B-TREE\n";
cout<<"\n1.INSERT\n2.DISPLAY\n3.EXIT\n";
cout<<"Enter Your Choice\n";
cin>>choice;
switch(choice)
{
case 1:cout<<"enter the key to be inserted\n";
fflush(stdin);
gets(New.key);
root=obj.Insert(New,root);
break;
case 2:cout<<"\n InOrder Traversal\n";
obj.InOrder(root);
break;
case 3:exit(0);
}
}
}
